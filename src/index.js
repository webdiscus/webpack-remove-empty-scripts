/**
 * Webpack 5 plugin to remove empty scripts generated by usage only style in entry.
 */

const path = require('path');
const colstr = require('./color-string');

const plugin = 'remove-empty-scripts';
const defaultOptions = {
  enabled: true,
  verbose: false,
  extensions: ['css', 'scss', 'sass', 'less', 'styl'],
  scriptExtensionsTest: /\.(js|mjs)$/,
  ignore: [],
};
const entryNameRegExp = /(.+)(?:\..+)$/;

class WebpackRemoveEmptyScriptsPlugin {
  constructor (options) {
    this.options = Object.assign({}, defaultOptions, options);
    this.enabled = this.options.enabled !== false;
    this.verbose = this.options.verbose;

    // if by assigned option the `ignore` was not array, then set as array
    if (!Array.isArray(this.options.ignore)) {
      this.options.ignore = [this.options.ignore];
    }

    if (Array.isArray(this.options.extensions)) {
      const pattern = this.options.extensions.map(etx => etx[0] === '.' ? etx.substring(1) : etx).join('|');
      // note: the pattern must match a resource with a query, e.g.: style.css?key=val
      this.options.extensions = new RegExp(`\.(${pattern})([?].*)?$`);
    }
  }

  apply (compiler) {
    if (!this.enabled) return;
    const { ignore: ignoreEntryResource, extensions: styleExtensionRegexp } = this.options;

    compiler.hooks.compilation.tap(plugin, compilation => {
      compilation.hooks.processAssets.tap(
        {
          name: plugin,
          // run this process after all others
          stage: compilation.PROCESS_ASSETS_STAGE_REPORT + 1000,
        },
        (assets) => {
          Object.keys(assets).forEach((filename) => {
            if (!this.options.scriptExtensionsTest.test(filename)) return;

            const outputPath = compiler.options.output.path;
            const [, name] = entryNameRegExp.exec(filename);
            const entry = compiler.options.entry[name];
            const entryResources = entry ? entry.import : [];
            const resources = ignoreEntryResource.length > 0
              ? entryResources.filter(res => ignoreEntryResource.every(item => !res.match(item)))
              : entryResources;
            const isEmptyScript = resources.length > 0 &&
              resources.every(resource => styleExtensionRegexp.test(resource));

            if (isEmptyScript) {
              if (this.verbose) {
                const outputFile = path.join(outputPath, filename);
                console.log(
                  ` ${colstr.bgYellow(` ${plugin} `, colstr.colors.black)} remove ${colstr.cyan(outputFile)}`
                );
              }
              compilation.deleteAsset(filename);
            }
          });
        },
      );
    });
  }
}

module.exports = WebpackRemoveEmptyScriptsPlugin;
